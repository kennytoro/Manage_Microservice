pipeline {
    agent any
    environment {
        NAME = 'Toro' 
        gateway = "kennytoro/gateway-service"
        product = "kennytoro/product-service"
        order = "kennytoro/order-service"
        notification = "kennytoro/notification-service"
        auth = "kennytoro/auth-service"
        user = "kennytoro/user-service"
    }
    triggers {
        pollSCM '* * * * *'
    }


    stages {

        stage('Login to docker hub') {
            steps {
                sh "cat passwd | sudo docker login -u kennytoro --password-stdin"
                echo 'Login successfully!!!'
            }
        }

        stage('Build docker images of the Microservices') {
            steps {
                echo "Welcome to ${NAME} Jenkins World"
                sh "sudo docker build ./auth-service/ -t ${auth}"
                sh "sudo docker build ./user-service/ -t ${user}"
                sh "sudo docker build ./notification-service/ -t ${notification}"
                sh "sudo docker build ./order-service/ -t ${order}"
                sh "sudo docker build ./product-service/ -t ${product}"
                sh "sudo docker build ./gateway-service/ -t ${gateway}"
                echo "Docker image build successfully"
            }
        }

        stage('Push Docker Image to Toro repo') {
            steps {
                sh "sudo docker push ${auth}"
                sh "sudo docker push ${user}"
                sh "sudo docker push ${notification}"
                sh "sudo docker push ${order}"
                sh "sudo docker push ${product}"
                sh "sudo docker push ${gateway}"
            }
        }

        stage('Test') {
            steps {
                sh "sudo docker images"
            }
        }
        stage('Running the image on k8s cluster') {
            steps {
                sh " kubectl apply -f ./deployment/"
            }
        }
    }

    post {
        success {
            sh '''
            kubectl top nodes
            kubectl get pods
            kubectl get svc
            kubectl get deployment
            kubectl top pods
            '''
            echo " A successful ${BUILD_ID} build"
        }
        failure {
            echo "Pipeline failed... Ooops man down!!"
        }
    }
}